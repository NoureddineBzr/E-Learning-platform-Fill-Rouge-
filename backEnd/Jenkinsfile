pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerHubCredentials')
        SONARQUBE_TOKEN = 'sqp_630eb6c9722626f365aac23a0d78e9c75f9a0333'
        SONARQUBE_SERVER = 'http://localhost:9000'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/NoureddineBzr/E-Learning-platform-Fill-Rouge-.git'
            }
        }

        stage('Build & Test filRouge') {
            steps {
                dir('backEnd') {
                    withMaven(maven: 'mvn') {
                        bat 'mvn clean install'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'
                    dir('backEnd') {
                        bat "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=backEnd -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONARQUBE_TOKEN} -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }

        stage('Build Docker Image & Push') {
            steps {
                dir('backEnd') {
                    script {
                        try {
                            bat 'docker context use default'

                            def imageTag = env.TAG_VERSION ?: 'latest'
                            def dockerImage = docker.build("noureddinebzr/filrouge:${imageTag}")

                            docker.withRegistry('https://index.docker.io/v1/', 'dockerHubCredentials') {
                                dockerImage.push()
                            }
                        } catch (Exception e) {
                            error "Docker build or push failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir('backEnd') {
                    bat 'docker-compose up -d'
                }
            }
        }
    }
}